<?php 

/**
 * Implements hook_menu().
 */

function statuscake_push_monitoring_menu() {
  $items['admin/config/services/statuscake'] = array(
    'title' => 'Statuscake',
    'description' => 'Settings for Statuscake',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('statuscake_push_monitoring_form'),
    'access arguments' => array('administer statuscake settings'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}

/**
 * Page callback: Settings page
 */

function statuscake_push_monitoring_form($form, &$form_state) {
  $form['form']['statuscake_push_monitoring_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL to PUSH to StatusCake Servers'),
    '#default_value' => variable_get('statuscake_push_monitoring_url'),
    '#size' => 70,
    '#maxlength' => 200,
    '#description' => t("The URL from statuscake.com settings page"),
    '#required' => TRUE,
  );

//check the inserted URL, ends with time=0 and it is an URL.

  return system_settings_form($form);
}

/**
 * Implements validation handler.
 *
 * Validating the URL on module settings page
 */
function statuscake_push_monitoring_settingspage_form_validate($form, &$form_state){
  $url = $form_state['values']['statuscake_push_monitoring_url'];
  if (!filter_var($url, FILTER_VALIDATE_URL) === false) {
    drupal_set_message(t("@url is a valid URL", array('@url' => $url)));
  }
  else {
    drupal_set_message(t('not valid URL'));
  }
}

/**
 * Converting time in microtime format.
 */
function statuscake_push_monitoring_microtime_float(){
			     list($usec, $sec) = explode(" ", microtime());
			     return ((float)$usec + (float)$sec);
			 }
 
/**
 * Implements hook_cron_queue_info().
 */

function statuscake_push_monitoring_cron_queue_info() {
  $debug = debug_backtrace();
  if (!empty($debug[3]['function']) && $debug['3']['function'] == 'drupal_cron_run') {
    //Getting start time in microseconds
    $time_start = statuscake_push_monitoring_microtime_float();
    array_unshift($debug, $time_start);

    //Getting end time in microseconds
    $time_end = statuscake_push_monitoring_microtime_float();
    array_push($debug, $time_end);

    //Getting time elapsed from start to end
    $time = ($time_end - $time_start) * 1000;

//IF time == NULL ? 

    //Inserting time variable in URL
    $statuscakeurl = variable_get('statuscake_push_monitoring_url');
    $statuscakeurl_with_time = substr($statuscakeurl, 0, -1) . $time;

                  //drupal_set_message(print_r($statuscakeurl_with_time, TRUE)); 

    //Visit URL
    drupal_http_request($statuscakeurl_with_time);
  }
                    //drupal_set_message(print_r($debug, TRUE)); 


  else {

  //!?!?

  }

}



